<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
       xmlns:sec="http://www.springframework.org/schema/security" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2
       http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">

    <!--<context:property-placeholder location="classpath:oauth.properties"/>-->

    <!-- Just for testing... -->
    <!--<http pattern="/oauth/cache_approvals" security="none"-->
          <!--xmlns="http://www.springframework.org/schema/security" />-->
    <!--<http pattern="/oauth/uncache_approvals" security="none"-->
          <!--xmlns="http://www.springframework.org/schema/security" />-->
    <!--<mvc:resources mapping="/resources/**" location="/resources/" />-->

    <!--&lt;!&ndash; This is where we tells spring security what URL should be protected and what roles have access to them &ndash;&gt;-->
    <!--<http pattern="/schools/**" create-session="stateless"-->
          <!--entry-point-ref="oauthAuthenticationEntryPoint"-->
          <!--access-decision-manager-ref="accessDecisionManager"-->
          <!--xmlns="http://www.springframework.org/schema/security">-->
        <!--<anonymous enabled="false" />-->
        <!--<intercept-url pattern="/schools/**" access="ROLE_USER" />-->
        <!--<custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />-->
        <!--&lt;!&ndash;<access-denied-handler ref="oauthAccessDeniedHandler" />&ndash;&gt;-->
    <!--</http>-->
    <!--<context:annotation-config/>-->

    <!--&lt;!&ndash;SAML2&ndash;&gt;-->
    <!--<context:component-scan base-package="org.springframework.security.saml"/>-->

    <!--<bean class="org.springframework.security.saml.metadata.MetadataGenerator">-->
        <!--<property name="bindingsSSO">-->
            <!--<list>-->
                <!--<value>artifact</value>-->
            <!--</list>-->
        <!--</property>-->
        <!--<property name="bindingsSLO">-->
            <!--<list>-->
                <!--<value>redirect</value>-->
            <!--</list>-->
        <!--</property>-->
        <!--<property name="bindingsHoKSSO">-->
            <!--<list/>-->
        <!--</property>-->
    <!--</bean>-->

    <!--<sec:http pattern="/sql/**" entry-point-ref="samlEntryPoint">-->
        <!--<sec:custom-filter before="FIRST" ref="metadataGeneratorFilter" />-->
        <!--<sec:custom-filter after="BASIC_AUTH_FILTER" ref="samlFilter"/>-->
    <!--</sec:http>-->
    <!--&lt;!&ndash;SAML2&ndash;&gt;-->

    <http pattern="/favicon.ico" security="none" xmlns="http://www.springframework.org/schema/security"/>
    <http pattern="/mock/**" security="none" xmlns="http://www.springframework.org/schema/security"/>

    <http pattern="/oauth/token" create-session="never"
          authentication-manager-ref="clientAuthenticationManager"
          xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/**" method="GET" access="ROLE_DENY" />
        <intercept-url pattern="/**" method="PUT" access="ROLE_DENY" />
        <intercept-url pattern="/**" method="DELETE" access="ROLE_DENY" />
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
        <anonymous enabled="false" />
        <http-basic entry-point-ref="clientAuthenticationEntryPoint" />
        <!-- include this only if you need to authenticate clients via request parameters -->
        <custom-filter ref="clientCredentialsTokenEndpointFilter"
                       after="BASIC_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
    </http>

    <!--Helps to redirect cpecified request parameters to login page-->
    <bean id="loginUrlAuthenticationEntryPoint" class="com.imcode.security.IvisLoginUrlAuthenticationEntryPoint"
          p:redirectParameterNames="#{{'display'}}" p:loginFormUrl="/login"/>

    <!-- The OAuth2 protected resources are separated out into their own block
        so we can deal with authorization and error handling separately. This isn't
        mandatory, but it makes it easier to control the behaviour. -->
    <http pattern="/oauth/(users|clients)/.*"
          request-matcher="regex"
          create-session="never"
          entry-point-ref="oauthAuthenticationEntryPoint"
          use-expressions="true" xmlns="http://www.springframework.org/schema/security">
        <anonymous enabled="false" />
        <intercept-url pattern="/oauth/users/([^/].*?)/tokens/.*"
                       access="#oauth2.clientHasRole('ROLE_CLIENT') and (hasRole('ROLE_USER') or #oauth2.isClient()) and #oauth2.hasScope('write')"
                       method="DELETE" />
        <intercept-url pattern="/oauth/users/.*"
                       access="#oauth2.clientHasRole('ROLE_CLIENT') and (hasRole('ROLE_USER') or #oauth2.isClient()) and #oauth2.hasScope('read')"
                       method="GET" />
        <intercept-url pattern="/oauth/clients/.*"
                       access="#oauth2.clientHasRole('ROLE_CLIENT') and #oauth2.isClient() and #oauth2.hasScope('read')"
                       method="GET" />
        <intercept-url pattern="/**" access="denyAll()" />
        <custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <expression-handler ref="oauthWebExpressionHandler" />
    </http>

    <!-- The OAuth2 protected resources are separated out into their own block
        so we can deal with authorization and error handling separately. This isn't
        mandatory, but it makes it easier to control the behaviour. -->
    <http pattern="/api/v1/**" create-session="never"
          entry-point-ref="oauthAuthenticationEntryPoint"
          access-decision-manager-ref="accessDecisionManager"
          xmlns="http://www.springframework.org/schema/security">
        <anonymous enabled="false" />
        <intercept-url pattern="/api/v1/**" access="ROLE_USER,SCOPE_READ" />
        <!--<intercept-url pattern="/photos" access="ROLE_USER,SCOPE_READ" />-->
        <!--<intercept-url pattern="/photos/trusted/**" access="ROLE_CLIENT,SCOPE_TRUST" />-->
        <!--<intercept-url pattern="/photos/user/**" access="ROLE_USER,SCOPE_TRUST" />-->
        <!--<intercept-url pattern="/photos/**" access="ROLE_USER,SCOPE_READ" />-->
        <custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
    </http>

    <http access-denied-page="/login?authorization_error=true"
          disable-url-rewriting="true"
          entry-point-ref="loginUrlAuthenticationEntryPoint"
          xmlns="http://www.springframework.org/schema/security">
        <!--<intercept-url pattern="/oauth/**" access="ROLE_USER" />-->
        <!--<intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />-->
        <!--<intercept-url pattern="/oauth/authorize" access="IS_AUTHENTICATED_ANONYMOUSLY" />-->
        <intercept-url pattern="/acs/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
        <intercept-url pattern="/login" access="IS_AUTHENTICATED_ANONYMOUSLY" />
        <!--<intercept-url pattern="/login" access="IS_AUTHENTICATED_ANONYMOUSLY" />-->
        <intercept-url pattern="/resources/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
        <!--<intercept-url pattern="/aсs/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />-->
        <!--<intercept-url pattern="/aсs" access="IS_AUTHENTICATED_ANONYMOUSLY" />-->
        <!--<intercept-url pattern="/csv/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />-->
        <!--<intercept-url pattern="/sql/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />-->
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />


        <form-login authentication-failure-url="/login?authentication_error=true"
                    default-target-url="/index" login-page="/login"
                    login-processing-url="/login.do" />
        <logout logout-success-url="/login" logout-url="/logout.do" />
        <anonymous />
        <!--<csrf/>-->
    </http>

    <!--Glogal Security-->
    <!--<http access-denied-page="/error403.jsp">-->
        <!--<sec:intercept-url pattern="/index*" access="ROLE_USER,ROLE_ADMIN" />-->
        <!--<sec:intercept-url pattern="/add*" access="ROLE_USER" />-->
        <!--<sec:intercept-url pattern="/delete/*" access="ROLE_ADMIN" />-->
        <!--<sec:form-login login-page="/login.jsp" default-target-url="/index"-->
                        <!--authentication-failure-url="/login.jsp?error=true" />-->
        <!--<sec:logout logout-url="/logout" logout-success-url="/index" />-->

        <!--<sec:anonymous username="guest" granted-authority="ROLE_ANONYMOUS" />-->
        <!--&lt;!&ndash;<sec:remember-me />&ndash;&gt;-->
    <!--</http>-->

    <!--<bean id="" class="com.imcode.entities.oauth2.JpaClientDetails"/>-->

    <bean id="oauthAuthenticationEntryPoint"
          class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="realmName" value="sparklr2" />
    </bean>

    <bean id="clientAuthenticationEntryPoint"
          class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="realmName" value="sparklr2/client" />
        <property name="typeName" value="Basic" />
    </bean>

    <bean id="oauthAccessDeniedHandler"
          class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

    <bean id="clientCredentialsTokenEndpointFilter"
          class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
        <property name="authenticationManager" ref="clientAuthenticationManager" />
    </bean>

    <bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased"
          xmlns="http://www.springframework.org/schema/beans">
        <constructor-arg>
            <list>
                <bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
                <bean class="org.springframework.security.access.vote.RoleVoter" />
                <bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
            </list>
        </constructor-arg>
    </bean>

    <authentication-manager id="clientAuthenticationManager"
                            xmlns="http://www.springframework.org/schema/security">
        <authentication-provider user-service-ref="clientDetailsUserService" />
    </authentication-manager>

    <bean id="encoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

    <authentication-manager alias="authenticationManager"
                            xmlns="http://www.springframework.org/schema/security">
        <authentication-provider user-service-ref="userServiceRepoImpl">
            <!--<jdbc-user-service data-source-ref="dataSource"/>-->
            <!--&lt;!&ndash;<user-service id="userDetailsService">&ndash;&gt;-->
                <!--&lt;!&ndash;<user name="admin" password="pass" authorities="ROLE_USER" />&ndash;&gt;-->
                <!--&lt;!&ndash;<user name="user1" password="1111" authorities="ROLE_USER" />&ndash;&gt;-->
            <!--&lt;!&ndash;</user-service>&ndash;&gt;-->
            <password-encoder ref="encoder"/>
        </authentication-provider>
    </authentication-manager>

    <bean id="clientDetailsUserService"
          class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <constructor-arg name="clientDetailsService" ref="clientDetailsServiceRepoImpl" />
    </bean>

    <!--TODO Override JdbcTokenStore onto the JpaTokenStore-->
    <!--<bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore" />-->
    <bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.store.JdbcTokenStore"
          c:dataSource-ref="dataSource"/>


    <bean id="tokenServices"
          class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
        <property name="tokenStore" ref="tokenStore" />
        <property name="tokenEnhancer" ref="tokenEnhancer" />
        <property name="supportRefreshToken" value="true" />
        <property name="clientDetailsService" ref="clientDetailsServiceRepoImpl" />
    </bean>

    <bean id="tokenEnhancer"
          class="com.imcode.oauth2.IvisTokenEnhancer" />

    <bean id="requestFactory"
          class="org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory">
        <constructor-arg name="clientDetailsService" ref="clientDetailsServiceRepoImpl" />
    </bean>

    <bean id="userApprovalHandler"
          class="com.imcode.oauth2.IvisUserApprovalHandler">
        <property name="approvalStore" ref="approvalStore" />
        <property name="clientDetailsService" ref="clientDetailsServiceRepoImpl" />
        <property name="requestFactory" ref="requestFactory" />
    </bean>

    <bean id="approvalStore"
          class="org.springframework.security.oauth2.provider.approval.TokenApprovalStore">
        <property name="tokenStore" ref="tokenStore" />
    </bean>
    <!--<bean id="approvalStore"-->
          <!--class="org.springframework.security.oauth2.provider.approval.JdbcApprovalStore"-->
          <!--c:dataSource-ref="dataSource"/>-->


    <oauth:authorization-server
            client-details-service-ref="clientDetailsServiceRepoImpl" token-services-ref="tokenServices"
            user-approval-handler-ref="userApprovalHandler">
        <oauth:authorization-code />
        <oauth:implicit />
        <oauth:refresh-token />
        <oauth:client-credentials />
        <oauth:password />
    </oauth:authorization-server>

    <oauth:resource-server id="resourceServerFilter"
                           resource-id="ivis" token-services-ref="tokenServices"/>

    <!--<oauth:client-details-service id="clientDetails">-->
        <!--<oauth:client client-id="my-trusted-client"-->
                      <!--authorized-grant-types="password,authorization_code,refresh_token,implicit"-->
                      <!--authorities="ROLE_CLIENT, ROLE_TRUSTED_CLIENT" scope="read,write,trust"-->
                      <!--access-token-validity="60" />-->
        <!--<oauth:client client-id="my-trusted-client-with-secret"-->
                      <!--authorized-grant-types="password,authorization_code,refresh_token,implicit"-->
                      <!--secret="somesecret" authorities="ROLE_CLIENT, ROLE_TRUSTED_CLIENT" />-->
        <!--<oauth:client client-id="my-client-with-secret"-->
                      <!--authorized-grant-types="client_credentials" authorities="ROLE_CLIENT"-->
                      <!--scope="read" secret="secret" />-->
        <!--<oauth:client client-id="my-less-trusted-client"-->
                      <!--authorized-grant-types="authorization_code,implicit" authorities="ROLE_CLIENT" />-->
        <!--<oauth:client client-id="my-less-trusted-autoapprove-client"-->
                      <!--authorized-grant-types="implicit" authorities="ROLE_CLIENT" scope="read,write,trust"-->
                      <!--autoapprove="true" />-->
        <!--<oauth:client client-id="my-client-with-registered-redirect"-->
                      <!--authorized-grant-types="authorization_code,client_credentials"-->
                      <!--authorities="ROLE_CLIENT" redirect-uri="http://anywhere?key=value"-->
                      <!--scope="read,trust" />-->
        <!--<oauth:client client-id="my-untrusted-client-with-registered-redirect"-->
                      <!--authorized-grant-types="authorization_code" authorities="ROLE_CLIENT"-->
                      <!--redirect-uri="http://anywhere" scope="read" />-->
        <!--<oauth:client client-id="tonr" resource-ids="sparklr"-->
                      <!--authorized-grant-types="authorization_code,implicit" authorities="ROLE_CLIENT"-->
                      <!--scope="read,write" secret="secret" />-->
        <!--<oauth:client client-id="tonr-with-redirect"-->
                      <!--resource-ids="sparklr" authorized-grant-types="authorization_code,implicit"-->
                      <!--authorities="ROLE_CLIENT" scope="read,write" secret="secret"-->
                      <!--redirect-uri="http://localhost:8080/tonr2/sparklr/redirect" />-->
    <!--</oauth:client-details-service>-->
    <!--<bean id="clientDetails" class="org.springframework.security.oauth2.provider.client.JdbcClientDetailsService"-->
          <!--c:dataSource-ref="dataSource"/>-->


    <mvc:annotation-driven />

    <mvc:default-servlet-handler />

    <sec:global-method-security
            pre-post-annotations="enabled" proxy-target-class="true">
        <!--you could also wire in the expression handler up at the layer of the
            http filters. See https://jira.springsource.org/browse/SEC-1452 -->
        <sec:expression-handler ref="oauthExpressionHandler" />
    </sec:global-method-security>

    <oauth:expression-handler id="oauthExpressionHandler" />

    <oauth:web-expression-handler id="oauthWebExpressionHandler" />

    <!--Basic application beans. -->
    <!--<bean id="viewResolver"-->
          <!--class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">-->
        <!--<property name="mediaTypes">-->
            <!--<map>-->
                <!--<entry key="json" value="application/json" />-->
            <!--</map>-->
        <!--</property>-->
        <!--<property name="viewResolvers">-->
            <!--<bean-->
                    <!--class="org.springframework.web.servlet.view.InternalResourceViewResolver">-->
                <!--<property name="prefix" value="/WEB-INF/jsp/"></property>-->
                <!--<property name="suffix" value=".jsp"></property>-->
            <!--</bean>-->
        <!--</property>-->
        <!--<property name="defaultViews">-->
            <!--<bean-->
                    <!--class="org.springframework.web.servlet.view.json.MappingJacksonJsonView">-->
                <!--<property name="extractValueFromSingleKeyModel" value="true" />-->
            <!--</bean>-->
        <!--</property>-->
    <!--</bean>-->

    <!--<bean id="photoController"-->
          <!--class="org.springframework.security.oauth.examples.sparklr.mvc.PhotoController">-->
        <!--<property name="photoService" ref="photoServices" />-->
    <!--</bean>-->

    <!--<bean id="photoServiceUserController"-->
          <!--class="org.springframework.security.oauth.examples.sparklr.mvc.PhotoServiceUserController">-->
        <!--<property name="userDetailsService" ref="userDetailsService" />-->
    <!--</bean>-->

    <!--<bean id="adminController"-->
          <!--class="org.springframework.security.oauth.examples.sparklr.mvc.AdminController">-->
        <!--<property name="tokenServices" ref="tokenServices" />-->
        <!--<property name="tokenStore" ref="tokenStore" />-->
        <!--<property name="userApprovalHandler" ref="userApprovalHandler" />-->
    <!--</bean>-->

    <!--&lt;!&ndash; Override the default mappings for approval and error pages &ndash;&gt;-->
    <!--<bean id="accessConfirmationController"-->
          <!--class="org.springframework.security.oauth.examples.sparklr.mvc.AccessConfirmationController">-->
        <!--<property name="clientDetailsService" ref="clientDetails" />-->
        <!--<property name="approvalStore" ref="approvalStore" />-->
    <!--</bean>-->

    <!--<bean id="photoServices"-->
          <!--class="org.springframework.security.oauth.examples.sparklr.impl.PhotoServiceImpl">-->
        <!--<property name="photos">-->
            <!--<list>-->
                <!--<bean-->
                        <!--class="org.springframework.security.oauth.examples.sparklr.PhotoInfo">-->
                    <!--<property name="id" value="1" />-->
                    <!--<property name="name" value="photo1.jpg" />-->
                    <!--<property name="userId" value="marissa" />-->
                    <!--<property name="resourceURL"-->
                              <!--value="/org/springframework/security/oauth/examples/sparklr/impl/resources/photo1.jpg" />-->
                <!--</bean>-->
                <!--<bean-->
                        <!--class="org.springframework.security.oauth.examples.sparklr.PhotoInfo">-->
                    <!--<property name="id" value="2" />-->
                    <!--<property name="name" value="photo2.jpg" />-->
                    <!--<property name="userId" value="paul" />-->
                    <!--<property name="resourceURL"-->
                              <!--value="/org/springframework/security/oauth/examples/sparklr/impl/resources/photo2.jpg" />-->
                <!--</bean>-->
                <!--<bean-->
                        <!--class="org.springframework.security.oauth.examples.sparklr.PhotoInfo">-->
                    <!--<property name="id" value="3" />-->
                    <!--<property name="name" value="photo3.jpg" />-->
                    <!--<property name="userId" value="marissa" />-->
                    <!--<property name="resourceURL"-->
                              <!--value="/org/springframework/security/oauth/examples/sparklr/impl/resources/photo3.jpg" />-->
                <!--</bean>-->
                <!--<bean-->
                        <!--class="org.springframework.security.oauth.examples.sparklr.PhotoInfo">-->
                    <!--<property name="id" value="4" />-->
                    <!--<property name="name" value="photo4.jpg" />-->
                    <!--<property name="userId" value="paul" />-->
                    <!--<property name="resourceURL"-->
                              <!--value="/org/springframework/security/oauth/examples/sparklr/impl/resources/photo4.jpg" />-->
                <!--</bean>-->
                <!--<bean-->
                        <!--class="org.springframework.security.oauth.examples.sparklr.PhotoInfo">-->
                    <!--<property name="id" value="5" />-->
                    <!--<property name="name" value="photo5.jpg" />-->
                    <!--<property name="userId" value="marissa" />-->
                    <!--<property name="resourceURL"-->
                              <!--value="/org/springframework/security/oauth/examples/sparklr/impl/resources/photo5.jpg" />-->
                <!--</bean>-->
                <!--<bean-->
                        <!--class="org.springframework.security.oauth.examples.sparklr.PhotoInfo">-->
                    <!--<property name="id" value="6" />-->
                    <!--<property name="name" value="photo6.jpg" />-->
                    <!--<property name="userId" value="paul" />-->
                    <!--<property name="resourceURL"-->
                              <!--value="/org/springframework/security/oauth/examples/sparklr/impl/resources/photo6.jpg" />-->
                <!--</bean>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->



</beans>
